 server {
    index index.php index.html;
    server_name 127.0.0.1 web;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /political-revolution.com/web/;

    # BEGIN W3TC Browser Cache
    gzip on;
    gzip_types text/css text/x-component application/x-javascript application/javascript text/javascript text/x-js text/richtext image/svg+xml text/plain text/xsd text/xsl text/xml image/bmp application/java application/msword application/vnd.ms-fontobject application/x-msdownload image/x-icon application/json application/vnd.ms-access application/vnd.ms-project application/x-font-otf application/vnd.ms-opentype application/vnd.oasis.opendocument.database application/vnd.oasis.opendocument.chart application/vnd.oasis.opendocument.formula application/vnd.oasis.opendocument.graphics application/vnd.oasis.opendocument.spreadsheet application/vnd.oasis.opendocument.text audio/ogg application/pdf application/vnd.ms-powerpoint application/x-shockwave-flash image/tiff application/x-font-ttf audio/wav application/vnd.ms-write application/font-woff application/font-woff2 application/vnd.ms-excel;
    # END W3TC Browser Cache

    # BEGIN W3TC Minify core
    set $w3tc_enc "";
    if ($http_accept_encoding ~ gzip) {
        set $w3tc_enc .gzip;
    }
    if (-f $request_filename$w3tc_enc) {
        rewrite (.*) $1$w3tc_enc break;
    }
    rewrite ^/app/cache/minify/ /wp/index.php last;
    # END W3TC Minify core

    # BEGIN W3TC Minify cache
    location ~ /app/cache/minify.*\.js$ {
        types {}
        default_type application/x-javascript;
        add_header Vary "Accept-Encoding";
    }
    location ~ /app/cache/minify.*\.css$ {
        types {}
        default_type text/css;
        add_header Vary "Accept-Encoding";
    }
    location ~ /app/cache/minify.*js\.gzip$ {
        gzip off;
        types {}
        default_type application/x-javascript;
        add_header Vary "Accept-Encoding";
        add_header Content-Encoding gzip;
    }
    location ~ /app/cache/minify.*css\.gzip$ {
        gzip off;
        types {}
        default_type text/css;
        add_header Vary "Accept-Encoding";
        add_header Content-Encoding gzip;
    }
    # END W3TC Minify cache

    # BEGIN W3TC Page Cache core
    set $w3tc_rewrite 1;
    if ($request_method = POST) {
        set $w3tc_rewrite 0;
    }
    if ($query_string != "") {
        set $w3tc_rewrite 0;
    }
    if ($request_uri !~ \/$) {
        set $w3tc_rewrite 0;
    }
    if ($http_cookie ~* "(comment_author|wp\-postpass|w3tc_logged_out|wordpress_logged_in|wptouch_switch_toggle)") {
        set $w3tc_rewrite 0;
    }
    if ($http_user_agent ~* "(W3\ Total\ Cache)") {
        set $w3tc_rewrite 0;
    }
    set $w3tc_preview "";
    if ($http_cookie ~* "(w3tc_preview)") {
        set $w3tc_preview _preview;
    }
    set $w3tc_enc "";
    if ($http_accept_encoding ~ gzip) {
        set $w3tc_enc _gzip;
    }
    if (!-f "$document_root/app/cache/page_enhanced/$http_host/$request_uri/_index$w3tc_preview.html$w3tc_enc") {
      set $w3tc_rewrite 0;
    }
    if ($w3tc_rewrite = 1) {
        rewrite .* "/app/cache/page_enhanced/$http_host/$request_uri/_index$w3tc_preview.html$w3tc_enc" last;
    }
    # END W3TC Page Cache core


    # BEGIN W3TC Page Cache cache
    location ~ /app/cache/page_enhanced.*html$ {
    }
    location ~ /app/cache/page_enhanced.*gzip$ {
        gzip off;
        types {}
        default_type text/html;
        add_header Content-Encoding gzip;
    }
    # END W3TC Page Cache cache



    # Allow .well-known requests
    location ^~ /.well-known {
            allow all;
            alias /home/tpr_prod/public_html/.well-known/;
    }

    # Block PHP files in uploads directory
    location ~* /wp/(?:uploads|files)/.*\.php$ {
            deny all;
    }

    # Block PHP files in content directory
    location ~* /wp/wp-content/.*\.php$ {
            deny all;
    }

    # Block PHP files in includes directory
    location ~* /wp/wp-includes/js/tinymce/wp-tinymce.php {
            include snippets/fastcgi-php.conf;
            fastcgi_pass php:9000;
            allow all;
    }

    location ~* /wp/wp-includes/.*\.php$ {
            deny all;
    }

    # Block PHP files in uploads, content, and includes directory
    location ~* /wp/(?:uploads|files|wp-content|wp-includes)/.*\.php$ {
            deny all;
    }

    # Block .git and .github folders
    location ~ /\.git {
            deny all;
    }

    location ~ /\.github {
            deny all;
    }

    # Block all MD files
    location ~ \.md$ {
            deny all;
    }
    
    # Send PHP to the FastCGI processor
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass php:9000;
    }
    
    # Serve it!
    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }
}